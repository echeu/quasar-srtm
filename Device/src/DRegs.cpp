/*  �� Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DRegs.h>
#include <ASRegs.h>
#include <string>

// ECC - include files for reading from /dev/mem (and maybe some extraneous things)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>
#include <ctype.h>
#include <termios.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <iostream>
#include <iomanip>

// ECC stuff for i2c
#include "malloc.h"
#include "xtypes.h"
#include "i2cBus.h"
#include "i2cDevUser.h"   /* Here "Dev" means /dev/i2c-X calls to access the bus. */
#include "tmp100.h"
#include "ltc2945.h"
#include "pca8575.h"
#include "firefly.h"
#include "ddr4.h"
#include "zynqOnBoard.h"

#include "sensorI2C.h"
#include "sensorData.h"
#include "sensorSRTM.h"
#include "sensorInitSRTM_hw2.h"

#include "SysInfo.h"
#include "cJSON.h"
#include "json_provider.h"




namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111



// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DRegs::DRegs (
    const Configuration::Regs& config,
    Parent_DRegs* parent
):

Base_DRegs( config, parent) {
    /* fill up constructor initialization list here */
    /* fill up constructor body here */
}

/* sample dtr */

DRegs::~DRegs () {
}


/* delegates for cachevariables */

// update output from /dev/mem
void DRegs::update() {

  static int maxprint = 0;
  static int first = 1;

  // initialize write value here since I can't figure out how to do this in the constructor
  if (first) {
    first = 0;

    // ECC - only do the sensor stuff for now
    sensorInitSRTM_hw2();
    LOG(Log::INF) << "Initialized sensor stuff.";
  }


  /* Get i2c data */
  sensorMonitor(0);

  // format sensor data. 
  cJSON *top = cJSON_CreateObject();
  sysinfoFormat(top);
  sensorFormat(top);

  // print out the sensor data
  if (maxprint < 2) {

    // ECC - open file for output --- This is temporary to check that it works
    FILE *json_file = fopen("SRTM-sensor.output.txt","w");
    char *string_json = NULL;
    string_json = cJSON_Print(top);
    fprintf(json_file, string_json);
    fclose(json_file);

    // write to std out
    std::cout << string_json << std::endl;
  }
  maxprint++;

  // get header information
  extract_header(top);

  cJSON *sensor_json;
  sensor_json = cJSON_GetObjectItem(top, "sensor");
  // Get the ltc data
  if (sensor_json) extract_ltc(sensor_json);

  // Get firefly data
  if (sensor_json) extract_firefly(11, sensor_json);
  if (sensor_json) extract_firefly(12, sensor_json);
  if (sensor_json) extract_firefly(13, sensor_json);
  
  // Get FPGA data
  if (sensor_json) extract_fpga(sensor_json);

  // Get Zynq data
  if (sensor_json) extract_zynq(sensor_json);

  // Get IPMC data
  if (sensor_json) extract_ipmc(sensor_json);
  
  // ECC - be sure to delete cJSON object
  cJSON_Delete(top);

}

// get header data from JSON object
void DRegs::extract_header(cJSON *top) {
  cJSON *hwid_json = NULL;
  cJSON *versions_json = NULL;
  cJSON *fwvers_json = NULL;
  cJSON *swvers_json = NULL;
  double hwid = -99, fwvers = -99, swvers = -99;
  
  // unpack header data 
  hwid_json = cJSON_GetObjectItem(top, "hwid");
  versions_json = cJSON_GetObjectItem(top, "versions");
  if (versions_json) fwvers_json = cJSON_GetObjectItem(versions_json, "fwvers");
  if (versions_json) swvers_json = cJSON_GetObjectItem(versions_json, "swvers");

  // get values
  if (hwid_json) hwid = hwid_json->valuedouble;
  if (fwvers_json) fwvers = fwvers_json->valuedouble;
  if (swvers_json) swvers = swvers_json->valuedouble;

  // Link to OpcUA
  getAddressSpaceLink()->setHwid(hwid,OpcUa_Good);
  getAddressSpaceLink()->setFwvers(fwvers,OpcUa_Good);
  getAddressSpaceLink()->setSwvers(swvers,OpcUa_Good);

}

// Get ltc values from JSON object
void DRegs::extract_ltc(cJSON *sensor_json) {

  cJSON *ltc_v1p8_json = NULL;
  cJSON *ltc_v3p3_json = NULL;
  cJSON *ltc_v2p5_json = NULL;
  cJSON *ltc_v1p2_json = NULL;
  cJSON *ltc_v0p9_json = NULL;
  cJSON *ltc_v0p85_json = NULL;
  cJSON *ltc_pddr_json = NULL;
  cJSON *ltc_pff_json = NULL;

  // voltages, currents and temps
  double ltc_v1p8, ltc_v3p3, ltc_v2p5, ltc_v1p2, ltc_v0p9, ltc_v0p85, ltc_pddr, ltc_pff;
  double ltc_v1p8_cur, ltc_v3p3_cur, ltc_v2p5_cur, ltc_v1p2_cur, ltc_v0p9_cur, ltc_v0p85_cur, ltc_pddr_cur, ltc_pff_cur;
  double ltc_v1p8_tmp, ltc_v3p3_tmp, ltc_v2p5_tmp, ltc_v1p2_tmp, ltc_v0p9_tmp, ltc_v0p85_tmp, ltc_pddr_tmp, ltc_pff_tmp;


  // unpack data from the ltc2945 device
  if (sensor_json) ltc_v1p8_json = cJSON_GetObjectItem(sensor_json, "ltc2945_v1p8");
  if (sensor_json) ltc_v3p3_json = cJSON_GetObjectItem(sensor_json, "ltc2945_v3p3");
  if (sensor_json) ltc_v2p5_json = cJSON_GetObjectItem(sensor_json, "ltc2945_v2p5");
  if (sensor_json) ltc_v1p2_json = cJSON_GetObjectItem(sensor_json, "ltc2945_v1p2");
  if (sensor_json) ltc_v0p9_json = cJSON_GetObjectItem(sensor_json, "ltc2945_v0p9");
  if (sensor_json) ltc_v0p85_json = cJSON_GetObjectItem(sensor_json, "ltc2945_v0p85");
  if (sensor_json) ltc_pddr_json = cJSON_GetObjectItem(sensor_json, "ltc2945_pddr");
  if (sensor_json) ltc_pff_json = cJSON_GetObjectItem(sensor_json, "ltc2945_pff");

  // get the voltages
  if (ltc_v1p8_json) ltc_v1p8 = cJSON_GetArrayItem(ltc_v1p8_json,2)->valuedouble;
  if (ltc_v3p3_json) ltc_v3p3 = cJSON_GetArrayItem(ltc_v3p3_json,2)->valuedouble;
  if (ltc_v2p5_json) ltc_v2p5 = cJSON_GetArrayItem(ltc_v2p5_json,2)->valuedouble;
  if (ltc_v1p2_json) ltc_v1p2 = cJSON_GetArrayItem(ltc_v1p2_json,2)->valuedouble;
  if (ltc_v0p9_json) ltc_v0p9 = cJSON_GetArrayItem(ltc_v0p9_json,2)->valuedouble;
  if (ltc_v0p85_json)ltc_v0p85 = cJSON_GetArrayItem(ltc_v0p85_json,2)->valuedouble;
  if (ltc_pddr_json) ltc_pddr = cJSON_GetArrayItem(ltc_pddr_json,2)->valuedouble;
  if (ltc_pff_json)  ltc_pff = cJSON_GetArrayItem(ltc_pff_json,2)->valuedouble;

  // get the currents
  if (ltc_v1p8_json) ltc_v1p8_cur = cJSON_GetArrayItem(ltc_v1p8_json,3)->valuedouble;
  if (ltc_v3p3_json) ltc_v3p3_cur = cJSON_GetArrayItem(ltc_v3p3_json,3)->valuedouble;
  if (ltc_v2p5_json) ltc_v2p5_cur = cJSON_GetArrayItem(ltc_v2p5_json,3)->valuedouble;
  if (ltc_v1p2_json) ltc_v1p2_cur = cJSON_GetArrayItem(ltc_v1p2_json,3)->valuedouble;
  if (ltc_v0p9_json) ltc_v0p9_cur = cJSON_GetArrayItem(ltc_v0p9_json,3)->valuedouble;
  if (ltc_v0p85_json)ltc_v0p85_cur = cJSON_GetArrayItem(ltc_v0p85_json,3)->valuedouble;
  if (ltc_pddr_json) ltc_pddr_cur = cJSON_GetArrayItem(ltc_pddr_json,3)->valuedouble;
  if (ltc_pff_json)  ltc_pff_cur = cJSON_GetArrayItem(ltc_pff_json,3)->valuedouble;

  // get the temperatures
  if (ltc_v1p8_json) ltc_v1p8_tmp = cJSON_GetArrayItem(ltc_v1p8_json,4)->valuedouble;
  if (ltc_v3p3_json) ltc_v3p3_tmp = cJSON_GetArrayItem(ltc_v3p3_json,4)->valuedouble;
  if (ltc_v2p5_json) ltc_v2p5_tmp = cJSON_GetArrayItem(ltc_v2p5_json,4)->valuedouble;
  if (ltc_v1p2_json) ltc_v1p2_tmp = cJSON_GetArrayItem(ltc_v1p2_json,4)->valuedouble;
  if (ltc_v0p9_json) ltc_v0p9_tmp = cJSON_GetArrayItem(ltc_v0p9_json,4)->valuedouble;
  if (ltc_v0p85_json)ltc_v0p85_tmp = cJSON_GetArrayItem(ltc_v0p85_json,4)->valuedouble;
  if (ltc_pddr_json) ltc_pddr_tmp = cJSON_GetArrayItem(ltc_pddr_json,4)->valuedouble;
  if (ltc_pff_json)  ltc_pff_tmp = cJSON_GetArrayItem(ltc_pff_json,4)->valuedouble;

  // link the data to OpcUa
  getAddressSpaceLink()->setSRTM_v00(ltc_v1p8,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v01(ltc_v3p3,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v02(ltc_v2p5,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v03(ltc_v1p2,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v04(ltc_v0p9,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v05(ltc_v0p85,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v06(ltc_pddr,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_v07(ltc_pff,OpcUa_Good);

  getAddressSpaceLink()->setSRTM_c00(ltc_v1p8_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c01(ltc_v3p3_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c02(ltc_v2p5_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c03(ltc_v1p2_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c04(ltc_v0p9_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c05(ltc_v0p85_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c06(ltc_pddr_cur,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_c07(ltc_pff_cur,OpcUa_Good);

  getAddressSpaceLink()->setSRTM_t00(ltc_v1p8_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t01(ltc_v3p3_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t02(ltc_v2p5_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t03(ltc_v1p2_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t04(ltc_v0p9_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t05(ltc_v0p85_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t06(ltc_pddr_tmp,OpcUa_Good);
  getAddressSpaceLink()->setSRTM_t07(ltc_pff_tmp,OpcUa_Good);
}

// Code to extract the information for FF13
// Unfortunately the SpaceLink code needs to be hardwired so it is not easily simplified
void DRegs::extract_firefly(int ffnumber, cJSON *sensor_json) {

  cJSON *ff_json = NULL;
  cJSON *present_json = NULL;
  cJSON *status_json = NULL;
  cJSON *txdisable_json = NULL;
  cJSON *cdrenable_json = NULL;
  cJSON *cdrrate_json = NULL;
  cJSON *cdrlol_json = NULL;
  cJSON *los_json = NULL;
  cJSON *txfault_json = NULL;
  cJSON *tempfault_json = NULL;
  cJSON *voltfault_json = NULL;
  cJSON *powerfault_json = NULL;
  cJSON *uptime_json = NULL;
  cJSON *tempC_json = NULL;
  cJSON *rxpower_json = NULL;
  cJSON *rxpower0_json, *rxpower1_json, *rxpower2_json, *rxpower3_json;
  cJSON *id_json = NULL;
  cJSON *model_json = NULL;
  cJSON *serial_json = NULL;
  cJSON *fwversion_json = NULL;

  double present = -99;
  double status = -99;
  double txdisable = -99;
  double cdrenable = -99;
  double cdrrate = -99;
  double cdrlol = -99;
  double los = -99;
  double txfault = -99;
  double tempfault = -99;
  double voltfault = -99;
  double powerfault = -99;
  double tempC = -99;
  double uptime = -99;
  double rxpower_0, rxpower_1, rxpower_2, rxpower_3;
  double id;
  char *model, *serial, *fwversion;

  // construct firefly name
  std::string ffname = "firefly" + std::to_string(ffnumber);
  int len = ffname.length()+1;
  char cffname[len];
  strcpy(cffname, ffname.c_str());
  
  // Get data from JSON construct
  if (sensor_json) ff_json = cJSON_GetObjectItem(sensor_json, cffname);
  if (ff_json) present_json = cJSON_GetObjectItem(ff_json, "present");
  if (ff_json) status_json = cJSON_GetObjectItem(ff_json, "status");
  if (ff_json) txdisable_json = cJSON_GetObjectItem(ff_json, "txdisable");
  if (ff_json) cdrenable_json = cJSON_GetObjectItem(ff_json, "cdrenable");
  if (ff_json) cdrrate_json = cJSON_GetObjectItem(ff_json, "cdrrate");
  if (ff_json) cdrlol_json = cJSON_GetObjectItem(ff_json, "cdrlol");
  if (ff_json) los_json = cJSON_GetObjectItem(ff_json, "los");
  if (ff_json) txfault_json = cJSON_GetObjectItem(ff_json, "txfault");
  if (ff_json) tempfault_json = cJSON_GetObjectItem(ff_json, "tempfault");
  if (ff_json) voltfault_json = cJSON_GetObjectItem(ff_json, "voltfault");
  if (ff_json) powerfault_json = cJSON_GetObjectItem(ff_json, "powerfault");
  if (ff_json) uptime_json = cJSON_GetObjectItem(ff_json, "uptime");
  if (ff_json) tempC_json = cJSON_GetObjectItem(ff_json, "tempC");
  if (ff_json) rxpower_json = cJSON_GetObjectItem(ff_json, "rxpower");
  if (ff_json) id_json = cJSON_GetObjectItem(ff_json, "id");
  if (ff_json) model_json = cJSON_GetObjectItem(ff_json, "model");
  if (ff_json) serial_json = cJSON_GetObjectItem(ff_json, "serial");
  if (ff_json) fwversion_json = cJSON_GetObjectItem(ff_json, "fwversion");

  if (present_json) present = present_json->valuedouble;
  if (status_json) status = status_json->valuedouble;
  if (txdisable_json) txdisable = txdisable_json->valuedouble;
  if (cdrenable_json) cdrenable = cdrenable_json->valuedouble;
  if (cdrrate_json) cdrrate = cdrrate_json->valuedouble;
  if (cdrlol_json) cdrlol = cdrlol_json->valuedouble;
  if (los_json) los = los_json->valuedouble;
  if (txfault_json) txfault = txfault_json->valuedouble;
  if (tempfault_json) tempfault = tempfault_json->valuedouble;
  if (voltfault_json) voltfault = voltfault_json->valuedouble;
  if (powerfault_json) powerfault = powerfault_json->valuedouble;
  if (uptime_json) uptime = uptime_json->valuedouble;
  if (tempC_json) tempC = tempC_json->valuedouble;
  if (rxpower_json) rxpower0_json = cJSON_GetArrayItem(rxpower_json,0);
  if (rxpower_json) rxpower1_json = cJSON_GetArrayItem(rxpower_json,1);
  if (rxpower_json) rxpower2_json = cJSON_GetArrayItem(rxpower_json,2);
  if (rxpower_json) rxpower3_json = cJSON_GetArrayItem(rxpower_json,3);
  if (rxpower0_json) rxpower_0 = rxpower0_json->valuedouble;
  if (rxpower1_json) rxpower_1 = rxpower1_json->valuedouble;
  if (rxpower2_json) rxpower_2 = rxpower2_json->valuedouble;
  if (rxpower3_json) rxpower_3 = rxpower3_json->valuedouble;
  if (id_json) id = id_json->valuedouble;
  if (model_json) model = model_json->valuestring;
  if (serial_json) serial = serial_json->valuestring;
  if (fwversion_json) fwversion = fwversion_json->valuestring;


  // link data to OpcUA
  if (ffnumber == 11) {
    getAddressSpaceLink()->setFF11_present(present,OpcUa_Good);
    getAddressSpaceLink()->setFF11_status(status,OpcUa_Good);
    getAddressSpaceLink()->setFF11_txdisable(txdisable,OpcUa_Good);
    getAddressSpaceLink()->setFF11_cdrenable(cdrenable,OpcUa_Good);
    getAddressSpaceLink()->setFF11_cdrrate(cdrrate,OpcUa_Good);
    getAddressSpaceLink()->setFF11_cdrlol(cdrlol,OpcUa_Good);
    getAddressSpaceLink()->setFF11_los(los,OpcUa_Good);
    getAddressSpaceLink()->setFF11_txfault(txfault,OpcUa_Good);
    getAddressSpaceLink()->setFF11_tempfault(tempfault,OpcUa_Good);
    getAddressSpaceLink()->setFF11_voltfault(voltfault,OpcUa_Good);
    getAddressSpaceLink()->setFF11_powerfault(powerfault,OpcUa_Good);
    getAddressSpaceLink()->setFF11_uptime(uptime,OpcUa_Good);
    getAddressSpaceLink()->setFF11_tempC(tempC,OpcUa_Good);
    getAddressSpaceLink()->setFF11_rxpower_0(rxpower_0,OpcUa_Good);
    getAddressSpaceLink()->setFF11_rxpower_1(rxpower_1,OpcUa_Good);
    getAddressSpaceLink()->setFF11_rxpower_2(rxpower_2,OpcUa_Good);
    getAddressSpaceLink()->setFF11_rxpower_3(rxpower_3,OpcUa_Good);
    getAddressSpaceLink()->setFF11_id(id,OpcUa_Good);
    getAddressSpaceLink()->setFF11_model(model,OpcUa_Good);
    getAddressSpaceLink()->setFF11_serial(serial,OpcUa_Good);
    getAddressSpaceLink()->setFF11_fwversion(fwversion,OpcUa_Good);
  }
  else if (ffnumber == 12) {
    getAddressSpaceLink()->setFF12_present(present,OpcUa_Good);
    getAddressSpaceLink()->setFF12_status(status,OpcUa_Good);
    getAddressSpaceLink()->setFF12_txdisable(txdisable,OpcUa_Good);
    getAddressSpaceLink()->setFF12_cdrenable(cdrenable,OpcUa_Good);
    getAddressSpaceLink()->setFF12_cdrrate(cdrrate,OpcUa_Good);
    getAddressSpaceLink()->setFF12_cdrlol(cdrlol,OpcUa_Good);
    getAddressSpaceLink()->setFF12_los(los,OpcUa_Good);
    getAddressSpaceLink()->setFF12_txfault(txfault,OpcUa_Good);
    getAddressSpaceLink()->setFF12_tempfault(tempfault,OpcUa_Good);
    getAddressSpaceLink()->setFF12_voltfault(voltfault,OpcUa_Good);
    getAddressSpaceLink()->setFF12_powerfault(powerfault,OpcUa_Good);
    getAddressSpaceLink()->setFF12_uptime(uptime,OpcUa_Good);
    getAddressSpaceLink()->setFF12_tempC(tempC,OpcUa_Good);
    getAddressSpaceLink()->setFF12_rxpower_0(rxpower_0,OpcUa_Good);
    getAddressSpaceLink()->setFF12_rxpower_1(rxpower_1,OpcUa_Good);
    getAddressSpaceLink()->setFF12_rxpower_2(rxpower_2,OpcUa_Good);
    getAddressSpaceLink()->setFF12_rxpower_3(rxpower_3,OpcUa_Good);
    getAddressSpaceLink()->setFF12_id(id,OpcUa_Good);
    getAddressSpaceLink()->setFF12_model(model,OpcUa_Good);
    getAddressSpaceLink()->setFF12_serial(serial,OpcUa_Good);
    getAddressSpaceLink()->setFF12_fwversion(fwversion,OpcUa_Good);
  }
  else if (ffnumber == 13) {
    getAddressSpaceLink()->setFF13_present(present,OpcUa_Good);
    getAddressSpaceLink()->setFF13_status(status,OpcUa_Good);
    getAddressSpaceLink()->setFF13_txdisable(txdisable,OpcUa_Good);
    getAddressSpaceLink()->setFF13_cdrenable(cdrenable,OpcUa_Good);
    getAddressSpaceLink()->setFF13_cdrrate(cdrrate,OpcUa_Good);
    getAddressSpaceLink()->setFF13_cdrlol(cdrlol,OpcUa_Good);
    getAddressSpaceLink()->setFF13_los(los,OpcUa_Good);
    getAddressSpaceLink()->setFF13_txfault(txfault,OpcUa_Good);
    getAddressSpaceLink()->setFF13_tempfault(tempfault,OpcUa_Good);
    getAddressSpaceLink()->setFF13_voltfault(voltfault,OpcUa_Good);
    getAddressSpaceLink()->setFF13_powerfault(powerfault,OpcUa_Good);
    getAddressSpaceLink()->setFF13_uptime(uptime,OpcUa_Good);
    getAddressSpaceLink()->setFF13_tempC(tempC,OpcUa_Good);
    getAddressSpaceLink()->setFF13_rxpower_0(rxpower_0,OpcUa_Good);
    getAddressSpaceLink()->setFF13_rxpower_1(rxpower_1,OpcUa_Good);
    getAddressSpaceLink()->setFF13_rxpower_2(rxpower_2,OpcUa_Good);
    getAddressSpaceLink()->setFF13_rxpower_3(rxpower_3,OpcUa_Good);
    getAddressSpaceLink()->setFF13_id(id,OpcUa_Good);
    getAddressSpaceLink()->setFF13_model(model,OpcUa_Good);
    getAddressSpaceLink()->setFF13_serial(serial,OpcUa_Good);
    getAddressSpaceLink()->setFF13_fwversion(fwversion,OpcUa_Good);
  }

}

// get fpga sensor data from the JSON structure
void DRegs::extract_fpga(cJSON *sensor_json) {
  cJSON *FPGA_json;
  cJSON *FPGA_up_json, *FPGA_temp_json, *FPGA_vint_json, *FPGA_vaux_json, *FPGA_vbram_json;
  double FPGA_up = -99, FPGA_temp = -99, FPGA_vint = -99, FPGA_vaux = -99, FPGA_vbram = -99;
  char  *FPGA_temp_str, *FPGA_vint_str, *FPGA_vaux_str, *FPGA_vbram_str;

  // first locate the fpga pointer
  if (sensor_json) FPGA_json = cJSON_GetObjectItem(sensor_json, "fpga");

  // now get the actual data
  if (FPGA_json) FPGA_up_json = cJSON_GetObjectItem(FPGA_json, "up");
  if (FPGA_json) FPGA_temp_json = cJSON_GetObjectItem(FPGA_json, "temp");
  if (FPGA_json) FPGA_vint_json = cJSON_GetObjectItem(FPGA_json, "vint");
  if (FPGA_json) FPGA_vaux_json = cJSON_GetObjectItem(FPGA_json, "vaux");
  if (FPGA_json) FPGA_vbram_json = cJSON_GetObjectItem(FPGA_json, "vbram");
  
  if (FPGA_up_json)    FPGA_up = FPGA_up_json->valuedouble; // the uptime is stored as a number
  if (FPGA_temp_json)  FPGA_temp_str = FPGA_temp_json->valuestring;
  if (FPGA_vint_json)  FPGA_vint_str = FPGA_vint_json->valuestring;
  if (FPGA_vaux_json)  FPGA_vaux_str = FPGA_vaux_json->valuestring;
  if (FPGA_vbram_json) FPGA_vbram_str = FPGA_vbram_json->valuestring;

  // these values are stored as strings and need to be converted
  FPGA_temp = std::stod(FPGA_temp_str);
  FPGA_vint = std::stod(FPGA_vint_str);
  FPGA_vaux = std::stod(FPGA_vaux_str);
  FPGA_vbram = std::stod(FPGA_vbram_str);

  // link data to OpcUA
  getAddressSpaceLink()->setFPGA_up(FPGA_up,OpcUa_Good);
  getAddressSpaceLink()->setFPGA_temp(FPGA_temp,OpcUa_Good);
  getAddressSpaceLink()->setFPGA_vint(FPGA_vint,OpcUa_Good);
  getAddressSpaceLink()->setFPGA_vaux(FPGA_vaux,OpcUa_Good);
  getAddressSpaceLink()->setFPGA_vbram(FPGA_vbram,OpcUa_Good);

}

// get IPMC sensor data from the JSON structure
void DRegs::extract_ipmc(cJSON *sensor_json) {
  cJSON *IPMC_json;
  cJSON *IPMC_id_json, *IPMC_i2cVer_json, *IPMC_rev_json, *IPMC_ver_json, *IPMC_seq_json;
  cJSON *IPMC_status_json, *IPMC_rawtime_json, *IPMC_time_json, *IPMC_iQ_I_json, *IPMC_iQ_VA_json;
  cJSON *IPMC_iQ_VB_json, *IPMC_iQ_T_json, *IPMC_PCF_al_json, *IPMC_PCF_ah_json, *IPMC_PCF_bl_V_json;
  cJSON *IPMC_PCF_bh_I_json, *IPMC_TMP100_fb_json, *IPMC_TMP100_bb_json, *IPMC_TMP100_ft_json, *IPMC_TMP100_bt_json;
  cJSON *IPMC_TMP100_z_json;
  cJSON *IPMC_LTC_6A_V_json,  *IPMC_LTC_6A_I_json, *IPMC_LTC_6A_T_json;
  cJSON *IPMC_LTC_67_V_json,  *IPMC_LTC_67_I_json;
  cJSON *IPMC_LTC_6B_V_json,  *IPMC_LTC_6B_I_json;
  cJSON *IPMC_LTC_6D_V1_json, *IPMC_LTC_6D_I1_json;
  cJSON *IPMC_LTC_69_V_json,  *IPMC_LTC_69_I_json;
  cJSON *IPMC_LTC_6C_V_json,  *IPMC_LTC_6C_I_json;
  cJSON *IPMC_LTC_6D_V2_json, *IPMC_LTC_6D_I2_json;
  cJSON *IPMC_LTC_6E_V_json,  *IPMC_LTC_6E_I_json;
  
  double IPMC_id = -99, IPMC_i2cVer = -99, IPMC_rev = -99, IPMC_ver = -99, IPMC_seq = -99;
  double IPMC_status = -99, IPMC_rawtime = -99, IPMC_iQ_I = -99, IPMC_iQ_VA = -99;
  double IPMC_iQ_VB = -99, IPMC_iQ_T = -99, IPMC_PCF_al = -99, IPMC_PCF_ah = -99, IPMC_PCF_bl_V = -99;
  double IPMC_PCF_bh_I = -99, IPMC_TMP100_fb = -99, IPMC_TMP100_bb = -99, IPMC_TMP100_ft = -99, IPMC_TMP100_bt = -99;
  double IPMC_TMP100_z = -99;
  double IPMC_LTC_6A_V = -99,  IPMC_LTC_6A_I = -99, IPMC_LTC_6A_T = -99;
  double IPMC_LTC_67_V = -99,  IPMC_LTC_67_I = -99;
  double IPMC_LTC_6B_V = -99,  IPMC_LTC_6B_I = -99;
  double IPMC_LTC_6D_V1 = -99, IPMC_LTC_6D_I1 = -99;
  double IPMC_LTC_69_V = -99,  IPMC_LTC_69_I = -99;
  double IPMC_LTC_6C_V = -99,  IPMC_LTC_6C_I = -99;
  double IPMC_LTC_6D_V2 = -99, IPMC_LTC_6D_I2 = -99;
  double IPMC_LTC_6E_V = -99,  IPMC_LTC_6E_I = -99;

  char *IPMC_time;


  // first locate the fpga pointer
  if (sensor_json) IPMC_json = cJSON_GetObjectItem(sensor_json, "ipmc");

  // now get the actual data
  if (IPMC_json) IPMC_id_json = cJSON_GetObjectItem(IPMC_json, "id");
  if (IPMC_json) IPMC_i2cVer_json = cJSON_GetObjectItem(IPMC_json, "i2cVer");
  if (IPMC_json) IPMC_rev_json = cJSON_GetObjectItem(IPMC_json, "rev");
  if (IPMC_json) IPMC_ver_json = cJSON_GetObjectItem(IPMC_json, "ver");
  if (IPMC_json) IPMC_seq_json = cJSON_GetObjectItem(IPMC_json, "seq");
  if (IPMC_json) IPMC_status_json = cJSON_GetObjectItem(IPMC_json, "status");
  if (IPMC_json) IPMC_rawtime_json = cJSON_GetObjectItem(IPMC_json, "rawtime");
  if (IPMC_json) IPMC_time_json = cJSON_GetObjectItem(IPMC_json, "time");
  if (IPMC_json) IPMC_iQ_I_json = cJSON_GetObjectItem(IPMC_json, "iQ65033qma10_I");
  if (IPMC_json) IPMC_iQ_VA_json = cJSON_GetObjectItem(IPMC_json, "iQ65033qma10_VA");
  if (IPMC_json) IPMC_iQ_VB_json = cJSON_GetObjectItem(IPMC_json, "iQ65033qma10_VB");
  if (IPMC_json) IPMC_iQ_T_json = cJSON_GetObjectItem(IPMC_json, "iQ65033qma10_T");
  if (IPMC_json) IPMC_PCF_al_json = cJSON_GetObjectItem(IPMC_json, "PCF8575_al");
  if (IPMC_json) IPMC_PCF_ah_json = cJSON_GetObjectItem(IPMC_json, "PCF8575_ah");
  if (IPMC_json) IPMC_PCF_bl_V_json = cJSON_GetObjectItem(IPMC_json, "PCF8575_bl_V");
  if (IPMC_json) IPMC_PCF_bh_I_json = cJSON_GetObjectItem(IPMC_json, "PCF8575_bh_I");
  if (IPMC_json) IPMC_TMP100_fb_json = cJSON_GetObjectItem(IPMC_json, "TMP100_fb");
  if (IPMC_json) IPMC_TMP100_bb_json = cJSON_GetObjectItem(IPMC_json, "TMP100_bb");
  if (IPMC_json) IPMC_TMP100_ft_json = cJSON_GetObjectItem(IPMC_json, "TMP100_ft");
  if (IPMC_json) IPMC_TMP100_bt_json = cJSON_GetObjectItem(IPMC_json, "TMP100_bt");
  if (IPMC_json) IPMC_TMP100_z_json = cJSON_GetObjectItem(IPMC_json, "TMP100_z");
  if (IPMC_json) IPMC_LTC_6A_V_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6A_V");
  if (IPMC_json) IPMC_LTC_6A_I_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6A_I");
  if (IPMC_json) IPMC_LTC_6A_T_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6A_T");
  if (IPMC_json) IPMC_LTC_67_V_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_67_V");
  if (IPMC_json) IPMC_LTC_67_I_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_67_I");
  if (IPMC_json) IPMC_LTC_6B_V_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6B_V");
  if (IPMC_json) IPMC_LTC_6B_I_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6B_I");
  if (IPMC_json) IPMC_LTC_6D_V1_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6D_V1");
  if (IPMC_json) IPMC_LTC_6D_I1_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6D_I1");
  if (IPMC_json) IPMC_LTC_69_V_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_69_V");
  if (IPMC_json) IPMC_LTC_69_I_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_69_I");
  if (IPMC_json) IPMC_LTC_6C_V_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6C_V");
  if (IPMC_json) IPMC_LTC_6C_I_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6C_I");
  if (IPMC_json) IPMC_LTC_6D_V2_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6D_V2");
  if (IPMC_json) IPMC_LTC_6D_I2_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6D_I2");
  if (IPMC_json) IPMC_LTC_6E_V_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6E_V");
  if (IPMC_json) IPMC_LTC_6E_I_json = cJSON_GetObjectItem(IPMC_json, "LTC2945_6E_I");


  if (IPMC_id_json)        IPMC_id  = IPMC_id_json->valuedouble; // these data are stored as numbers
  if (IPMC_i2cVer_json)    IPMC_i2cVer = IPMC_i2cVer_json->valuedouble;
  if (IPMC_rev_json)       IPMC_rev = IPMC_rev_json->valuedouble;
  if (IPMC_ver_json)       IPMC_ver = IPMC_ver_json->valuedouble;
  if (IPMC_seq_json)       IPMC_seq = IPMC_seq_json->valuedouble;
  if (IPMC_status_json)    IPMC_status = IPMC_status_json->valuedouble;
  if (IPMC_rawtime_json)   IPMC_rawtime = IPMC_rawtime_json->valuedouble;
  if (IPMC_time_json)      IPMC_time = IPMC_time_json->valuestring;
  if (IPMC_iQ_I_json)      IPMC_iQ_I = IPMC_iQ_I_json->valuedouble;
  if (IPMC_iQ_VA_json)     IPMC_iQ_VA = IPMC_iQ_VA_json->valuedouble;
  if (IPMC_iQ_VB_json)     IPMC_iQ_VB = IPMC_iQ_VB_json->valuedouble;
  if (IPMC_iQ_T_json)      IPMC_iQ_T = IPMC_iQ_T_json->valuedouble;
  if (IPMC_PCF_al_json)    IPMC_PCF_al = IPMC_PCF_al_json->valuedouble;
  if (IPMC_PCF_ah_json)    IPMC_PCF_ah = IPMC_PCF_ah_json->valuedouble;
  if (IPMC_PCF_bl_V_json)  IPMC_PCF_bl_V = IPMC_PCF_bl_V_json->valuedouble;
  if (IPMC_PCF_bh_I_json)  IPMC_PCF_bh_I = IPMC_PCF_bh_I_json->valuedouble;
  if (IPMC_TMP100_fb_json) IPMC_TMP100_fb = IPMC_TMP100_fb_json->valuedouble;
  if (IPMC_TMP100_bb_json) IPMC_TMP100_bb = IPMC_TMP100_bb_json->valuedouble;
  if (IPMC_TMP100_ft_json) IPMC_TMP100_ft = IPMC_TMP100_ft_json->valuedouble;
  if (IPMC_TMP100_bt_json) IPMC_TMP100_bt = IPMC_TMP100_bt_json->valuedouble;
  if (IPMC_TMP100_z_json)  IPMC_TMP100_z = IPMC_TMP100_z_json->valuedouble;
  if (IPMC_LTC_6A_V_json)  IPMC_LTC_6A_V = IPMC_LTC_6A_V_json->valuedouble;
  if (IPMC_LTC_6A_I_json)  IPMC_LTC_6A_I = IPMC_LTC_6A_I_json->valuedouble;
  if (IPMC_LTC_6A_T_json)  IPMC_LTC_6A_T = IPMC_LTC_6A_T_json->valuedouble;
  if (IPMC_LTC_67_V_json)  IPMC_LTC_67_V = IPMC_LTC_67_V_json->valuedouble;
  if (IPMC_LTC_67_I_json)  IPMC_LTC_67_I = IPMC_LTC_67_I_json->valuedouble;
  if (IPMC_LTC_6B_V_json)  IPMC_LTC_6B_V = IPMC_LTC_6B_V_json->valuedouble;
  if (IPMC_LTC_6B_I_json)  IPMC_LTC_6B_I = IPMC_LTC_6B_I_json->valuedouble;
  if (IPMC_LTC_6D_V1_json)  IPMC_LTC_6D_V1 = IPMC_LTC_6D_V1_json->valuedouble;
  if (IPMC_LTC_6D_I1_json)  IPMC_LTC_6D_I1 = IPMC_LTC_6D_I1_json->valuedouble;
  if (IPMC_LTC_69_V_json)  IPMC_LTC_69_V = IPMC_LTC_69_V_json->valuedouble;
  if (IPMC_LTC_69_I_json)  IPMC_LTC_69_I = IPMC_LTC_69_I_json->valuedouble;
  if (IPMC_LTC_6C_V_json)  IPMC_LTC_6C_V = IPMC_LTC_6C_V_json->valuedouble;
  if (IPMC_LTC_6C_I_json)  IPMC_LTC_6C_I = IPMC_LTC_6C_I_json->valuedouble;
  if (IPMC_LTC_6D_V2_json)  IPMC_LTC_6D_V2 = IPMC_LTC_6D_V2_json->valuedouble;
  if (IPMC_LTC_6D_I2_json)  IPMC_LTC_6D_I2 = IPMC_LTC_6D_I2_json->valuedouble;
  if (IPMC_LTC_6E_V_json)  IPMC_LTC_6E_V = IPMC_LTC_6E_V_json->valuedouble;
  if (IPMC_LTC_6E_I_json)  IPMC_LTC_6E_I = IPMC_LTC_6E_I_json->valuedouble;


  // link data to OpcUA
  getAddressSpaceLink()->setIPMC_id(IPMC_id,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_i2cVer(IPMC_i2cVer,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_rev(IPMC_rev,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_ver(IPMC_ver,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_seq(IPMC_seq,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_status(IPMC_status,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_rawtime(IPMC_rawtime,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_time(IPMC_time,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_iQ_I(IPMC_iQ_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_iQ_VA(IPMC_iQ_VA,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_iQ_VB(IPMC_iQ_VB,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_iQ_T(IPMC_iQ_T,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_PCF_al(IPMC_PCF_al,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_PCF_ah(IPMC_PCF_ah,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_PCF_bl_V(IPMC_PCF_bl_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_PCF_bh_I(IPMC_PCF_bh_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_TMP100_fb(IPMC_TMP100_fb,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_TMP100_bb(IPMC_TMP100_bb,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_TMP100_ft(IPMC_TMP100_ft,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_TMP100_bt(IPMC_TMP100_bt,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_TMP100_z(IPMC_TMP100_z,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6A_V(IPMC_LTC_6A_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6A_I(IPMC_LTC_6A_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6A_T(IPMC_LTC_6A_T,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_67_V(IPMC_LTC_67_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_67_I(IPMC_LTC_67_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6B_V(IPMC_LTC_6B_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6B_I(IPMC_LTC_6B_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6D_V1(IPMC_LTC_6D_V1,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6D_I1(IPMC_LTC_6D_I1,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_69_V(IPMC_LTC_69_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_69_I(IPMC_LTC_69_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6C_V(IPMC_LTC_6C_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6C_I(IPMC_LTC_6C_I,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6D_V2(IPMC_LTC_6D_V2,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6D_I2(IPMC_LTC_6D_I2,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6E_V(IPMC_LTC_6E_V,OpcUa_Good);
  getAddressSpaceLink()->setIPMC_LTC_6E_I(IPMC_LTC_6E_I,OpcUa_Good);

}
  
// Get Zynq values from JSON object
void DRegs::extract_zynq(cJSON *sensor_json) {

  // JSON objects
  cJSON *zynqps_json = NULL;
  cJSON *ps_temp_json = NULL, *pl_temp_json = NULL, *vcc_pspll0_json = NULL, *vccint_json = NULL;
  cJSON *vccbram_json = NULL, *vccaux_json = NULL, *vcc_psddrpll_json = NULL, *vcc_psintfp_ddr_json = NULL;
  cJSON *vcc_ps_lpd1_json = NULL, *vcc_ps_lpd2_json = NULL, *ps_aux3_json = NULL, *vcc_ddr_io_json = NULL;
  cJSON *ps_bank_503_json = NULL, *ps_bank_500_json = NULL, *vcc0_psi01_1_json = NULL;
  cJSON *vcc0_psi01_2_json = NULL;
  cJSON *vcc_ps_gtr_json = NULL, *vtt_ps_gtr_json = NULL, *vcc_ps_adc_json = NULL, *vcc_pl_int_json = NULL;
  cJSON *vcc_pl_aux_json = NULL, *vref_p_json = NULL ,*vref_n_json = NULL, *vcc_pl_bram_json = NULL;
  cJSON *vcc_ps_intlp4_json = NULL, *vcc_ps_intfp5_json = NULL, *vcc_ps_aux_json = NULL;
  cJSON *vcc_pl_adc_json = NULL;

  // voltages, temps, etc.
  double ps_temp = -99, pl_temp = -99, vcc_pspll0 = -99, vccint = -99;
  double vccbram = -99, vccaux = -99, vcc_psddrpll = -99, vcc_psintfp_ddr = -99;
  double vcc_ps_lpd1 = -99, vcc_ps_lpd2 = -99, ps_aux3 = -99, vcc_ddr_io = -99;
  double ps_bank_503 = -99, ps_bank_500 = -99, vcc0_psi01_1 = -99, vcc0_psi01_2 = -99;
  double vcc_ps_gtr = -99, vtt_ps_gtr = -99, vcc_ps_adc = -99, vcc_pl_int = -99;
  double vcc_pl_aux = -99, vref_p = -99 ,vref_n = -99, vcc_pl_bram = -99;
  double vcc_ps_intlp4 = -99, vcc_ps_intfp5 = -99, vcc_ps_aux = -99;
  double vcc_pl_adc = -99;

  // unpack data from the Zynq
  if (sensor_json) zynqps_json = cJSON_GetObjectItem(sensor_json, "zynqps");
  if (zynqps_json) ps_temp_json = cJSON_GetObjectItem(zynqps_json, "PS LPD temp");
  if (zynqps_json) pl_temp_json = cJSON_GetObjectItem(zynqps_json, "PL temp");
  if (zynqps_json) vcc_pspll0_json = cJSON_GetObjectItem(zynqps_json, "VCC_PSPLL0");
  if (zynqps_json) vccint_json = cJSON_GetObjectItem(zynqps_json, "VCCINT");
  if (zynqps_json) vccbram_json = cJSON_GetObjectItem(zynqps_json, "VCCBRAM");
  if (zynqps_json) vccaux_json = cJSON_GetObjectItem(zynqps_json, "VCCAUX");
  if (zynqps_json) vcc_psddrpll_json = cJSON_GetObjectItem(zynqps_json, "VCC_PSDDRPLL");
  if (zynqps_json) vcc_psintfp_ddr_json = cJSON_GetObjectItem(zynqps_json, "VCC_PSINTFP_DDR"); //
  if (zynqps_json) vcc_ps_lpd1_json = cJSON_GetObjectItem(zynqps_json, "VCC_PS_LPD1");
  if (zynqps_json) vcc_ps_lpd2_json = cJSON_GetObjectItem(zynqps_json, "VCC PS_LPD2");
  if (zynqps_json) ps_aux3_json = cJSON_GetObjectItem(zynqps_json, "PS AUX3");
  if (zynqps_json) vcc_ddr_io_json = cJSON_GetObjectItem(zynqps_json, "VCC_DDR_IO");
  if (zynqps_json) ps_bank_503_json = cJSON_GetObjectItem(zynqps_json, "PS_Bank_503");
  if (zynqps_json) ps_bank_500_json = cJSON_GetObjectItem(zynqps_json, "PS_Bank_500");
  if (zynqps_json) vcc0_psi01_1_json = cJSON_GetObjectItem(zynqps_json, "VCCO_PSIO1_1"); //
  if (zynqps_json) vcc0_psi01_2_json = cJSON_GetObjectItem(zynqps_json, "VCCO_PSIO1_2"); //
  if (zynqps_json) vcc_ps_gtr_json = cJSON_GetObjectItem(zynqps_json, "VCC_PS_GTR");
  if (zynqps_json) vtt_ps_gtr_json = cJSON_GetObjectItem(zynqps_json, "VTT_PS_GTR");
  if (zynqps_json) vcc_ps_adc_json = cJSON_GetObjectItem(zynqps_json, "VCC_PS_ADC");
  if (zynqps_json) vcc_pl_int_json = cJSON_GetObjectItem(zynqps_json, "VCC_PL_INT");
  if (zynqps_json) vcc_pl_aux_json = cJSON_GetObjectItem(zynqps_json, "VCC_PL_AUX"); //
  if (zynqps_json) vref_p_json = cJSON_GetObjectItem(zynqps_json, "VREF_P");
  if (zynqps_json) vref_n_json = cJSON_GetObjectItem(zynqps_json, "VREF_N");
  if (zynqps_json) vcc_pl_bram_json = cJSON_GetObjectItem(zynqps_json, "VCC_PL_BRAM");
  if (zynqps_json) vcc_ps_intlp4_json = cJSON_GetObjectItem(zynqps_json, "VCC_PS_INTLP4");
  if (zynqps_json) vcc_ps_intfp5_json = cJSON_GetObjectItem(zynqps_json, "VCC_PS_INTFP5");
  if (zynqps_json) vcc_ps_aux_json = cJSON_GetObjectItem(zynqps_json, "VCC_PS_AUX");
  if (zynqps_json) vcc_pl_adc_json = cJSON_GetObjectItem(zynqps_json, "VCC_PL_ADC");

  // get the voltages. Need to guard against the data being a string (somehow)
  // Modified zynqOnBoard.c to force values to be  doubles rather than strings (on error)
  if (ps_temp_json) ps_temp = ps_temp_json->valuedouble;
  if (pl_temp_json) pl_temp = pl_temp_json->valuedouble;
  if (vcc_pspll0_json) vcc_pspll0 = vcc_pspll0_json->valuedouble;
  if (vccint_json) vccint = vccint_json->valuedouble;
  if (vccbram_json) vccbram = vccbram_json->valuedouble;
  if (vccaux_json) vccaux = vccaux_json->valuedouble;
  if (vcc_psddrpll_json) vcc_psddrpll = vcc_psddrpll_json->valuedouble;
  if (vcc_psintfp_ddr_json) vcc_psintfp_ddr = vcc_psintfp_ddr_json->valuedouble;
  if (vcc_ps_lpd1_json) vcc_ps_lpd1 = vcc_ps_lpd1_json->valuedouble;
  if (vcc_ps_lpd2_json) vcc_ps_lpd2 = vcc_ps_lpd2_json->valuedouble;
  if (ps_aux3_json) ps_aux3 = ps_aux3_json->valuedouble;
  if (vcc_ddr_io_json) vcc_ddr_io = vcc_ddr_io_json->valuedouble;
  if (ps_bank_503_json) ps_bank_503 = ps_bank_503_json->valuedouble;
  if (ps_bank_500_json) ps_bank_500 = ps_bank_500_json->valuedouble;
  if (vcc0_psi01_1_json) vcc0_psi01_1 = vcc0_psi01_1_json->valuedouble;
  if (vcc0_psi01_2_json) vcc0_psi01_2 = vcc0_psi01_2_json->valuedouble;
  if (vcc_ps_gtr_json) vcc_ps_gtr = vcc_ps_gtr_json->valuedouble;
  if (vtt_ps_gtr_json) vtt_ps_gtr = vtt_ps_gtr_json->valuedouble;
  if (vcc_ps_adc_json) vcc_ps_adc = vcc_ps_adc_json->valuedouble;
  if (vcc_pl_int_json) vcc_pl_int = vcc_pl_int_json->valuedouble;
  if (vcc_pl_aux_json) vcc_pl_aux = vcc_pl_aux_json->valuedouble;
  if (vref_p_json) vref_p = vref_p_json->valuedouble;
  if (vref_n_json) vref_n = vref_n_json->valuedouble;
  if (vcc_pl_bram_json) vcc_pl_bram = vcc_pl_bram_json->valuedouble;
  if (vcc_ps_intlp4_json) vcc_ps_intlp4 = vcc_ps_intlp4_json->valuedouble;
  if (vcc_ps_intfp5_json) vcc_ps_intfp5 = vcc_ps_intfp5_json->valuedouble;
  if (vcc_ps_aux_json) vcc_ps_aux = vcc_ps_aux_json->valuedouble;
  if (vcc_pl_adc_json) vcc_pl_adc = vcc_pl_adc_json->valuedouble;

  // link data to OpcUA
  getAddressSpaceLink()->setZynq_ps_temp(ps_temp,OpcUa_Good);
  getAddressSpaceLink()->setZynq_pl_temp(pl_temp,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_pspll0(vcc_pspll0,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vccint(vccint,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vccbram(vccbram,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vccaux(vccaux,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_psddrpll(vcc_psddrpll,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_psintfp_ddr(vcc_psintfp_ddr,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_lpd1(vcc_ps_lpd1,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_lpd2(vcc_ps_lpd2,OpcUa_Good);
  getAddressSpaceLink()->setZynq_ps_aux3(ps_aux3,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ddr_io(vcc_ddr_io,OpcUa_Good);
  getAddressSpaceLink()->setZynq_ps_bank_503(ps_bank_503,OpcUa_Good);
  getAddressSpaceLink()->setZynq_ps_bank_500(ps_bank_500,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc0_psi01_1(vcc0_psi01_1,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc0_psi01_2(vcc0_psi01_2,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_gtr(vcc_ps_gtr,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vtt_ps_gtr(vtt_ps_gtr,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_adc(vcc_ps_adc,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_pl_int(vcc_pl_int,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_pl_aux(vcc_pl_aux,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vref_p(vref_p,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vref_n(vref_n,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_pl_bram(vcc_pl_bram,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_intlp4(vcc_ps_intlp4,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_intfp5(vcc_ps_intfp5,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_ps_aux(vcc_ps_aux,OpcUa_Good);
  getAddressSpaceLink()->setZynq_vcc_pl_adc(vcc_pl_adc,OpcUa_Good);
}
  
} // Device
