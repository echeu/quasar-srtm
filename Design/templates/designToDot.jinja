{# Â© Copyright CERN, 2015.                                                       #}
{# All rights not expressly granted are reserved.                                #}
{# This file is part of Quasar.                                                  #}
{#                                                                               #}
{# Quasar is free software: you can redistribute it and/or modify                #}
{# it under the terms of the GNU Lesser General Public Licence as published by   #}
{# the Free Software Foundation, either version 3 of the Licence.                #}
{# Quasar is distributed in the hope that it will be useful,                     #}
{# but WITHOUT ANY WARRANTY; without even the implied warranty of                #}
{#                                                                               #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 #}
{# GNU Lesser General Public Licence for more details.                           #}
{#                                                                               #}
{# You should have received a copy of the GNU Lesser General Public License      #}
{# along with Quasar.  If not, see <http://www.gnu.org/licenses/>                #}
{#                                                                               #}
{# Created:   Jun 2014 (the original XSLT version)                               #}
{#            04 May 2020 (translated to Jinja2)                                 #}
{# Authors:                                                                      #}
{#   Piotr Nikiel <piotr@nikiel.info>                                            #}
{#                                                                               #}
{# Important Note (pnikiel):                                                     #}
{#   This transform is very sensitive to whitespace changes due to how GraphViz  #}
{#   deals with whitespace rendering. Thus accept it's indented as it is.        #}

{%- macro getArrowForCacheVariable(cv) -%}
  {%- if cv.get('addressSpaceWrite') == 'forbidden' -%}
    &#8592;{# unicode for <- #}
  {%- else -%}
    &#8596;{# unicode for <-> #}
  {%- endif -%}
{%- endmacro -%}

{%- macro getArrowForSourceVariable(sv) -%}
  {% if sv.get('addressSpaceRead') != 'forbidden' and sv.get('addressSpaceWrite') != 'forbidden' -%}
    &#8596;{# unicode for <-> #}
  {% elif sv.get('addressSpaceRead') == 'forbidden' and sv.get('addressSpaceWrite') != 'forbidden' -%}
    &#8594;{# unicode for -> #}
  {% elif sv.get('addressSpaceRead') != 'forbidden' and sv.get('addressSpaceWrite') == 'forbidden' -%}
    &#8592;{# unicode for <- #}
  {% else -%}
    &#9949;{# unicode for something that Piotr forgot what is it #}
  {% endif %}
{% endmacro %}

{% macro hasObjectsRelation(parentName, ho) %}
  {% if ho.get('instantiateUsing') == 'configuration' %}
    {% if ho.get('minOccurs') == '1' and ho.get('maxOccurs') == '1' %}
      {% set label = "1" %}
    {% elif ho.get('minOccurs') == None and ho.get('maxOccurs') == None %}
      {% set label = "*" %}
    {% else %}
      {% set label = ho.get('minOccurs')|replace('None','0') + '..' + ho.get('maxOccurs')|replace(None,'') %}
    {% endif %}
  {% else %}
    {% set label = ho.object|length|string + ",nc" %}
  {% endif %}
  class_{{parentName}} -> class_{{ho.get('class')}} [arrowtail=odiamond,dir=back,label="{{label}}"]
{% endmacro %}

{% macro printTypeNicely(x) -%}
  {{x.get('dataType')|replace('OpcUa_','')|replace('Ua','')}}{% if x.array|length>0 %}[ ]{% endif %}
{%- endmacro %}

digraph  {
  graph [fontname="Arial"]
  {% for className in designInspector.get_names_of_all_classes() %}
    {% set class = designInspector.objectify_class(className) %}
    class_{{className}} [shape=none,margin=0,label=<
      <table border="1" cellspacing="0" cellpadding="2" cellborder="0">
        <tr> 
          <td width="0"></td>
          <td width="0"></td>
          <td colspan="2" align="center"><b><font point-size="18" >{{className}}</font>{% if detailLevel|int >= 2 %}<font point-size="10" color="blue" >DL={{designInspector.class_has_device_logic(className)|replace('True','1')|replace('False','0')}}</font>{% endif %}</b></td>
        </tr>
        <hr/>
        {%- if class.cachevariable|length + class.sourcevariable|length + class.configentry|length == 0 -%} {# the class is basically empty #}
          <tr>
            <td colspan="4"> </td>
          </tr>
        {%- else -%}
          {%- for cv in class.cachevariable -%}
            <tr>
            <!-- don't indent the lines below: you will break the graphical layout -->
            <td align="left" width="0">{%- if detailLevel|int>=3 -%}<font point-size="16">{{getArrowForCacheVariable(cv)}}</font>{%- endif %}</td>
            <td align="left" width="0">{% if detailLevel|int >= 1 %}<font point-size="10" color="blue" >CV{% if detailLevel|int>=4 and cv.configRestriction|length>0 %},R{% endif %}</font>{% endif %}</td>
            <td align="left" >{{cv.get('name')}}</td>
            <td align="left" >: {{printTypeNicely(cv)}}</td>
            </tr>
          {%- endfor -%}
          {%- for sv in class.sourcevariable -%}
            <tr>
            <!-- don't indent the lines below: you will break the graphical layout -->
            <td align="left" width="0">{% if detailLevel|int >= 3 %}<font point-size="16">{{getArrowForSourceVariable(sv)}}</font>{% endif %}</td>
            <td align="left">{% if detailLevel|int >= 1 %}<font point-size="10" color="darkgreen" >SV</font>{% endif %}</td>
            <td align="left" >{{sv.get('name')}}</td>
            <td align="left" >: {{printTypeNicely(sv)}}</td>
            </tr>
          {%- endfor -%}
          {%- for ce in class.configentry -%}
            <tr>
            <!-- don't indent the lines below: you will break the graphical layout -->
            <td align="left" width="0"></td>
            <td align="left">{% if detailLevel|int >= 1 %}<font point-size="10" color="red" >CE{% if ce.get('isKey') %},K{% endif %}{% if detailLevel|int>=4 and ce.configRestriction|length>0 %},R{% endif %}</font>{% endif %}</td>
            <td align="left" >{{ce.get('name')}}</td>
            <td align="left" >: {{printTypeNicely(ce)}}</td>
            </tr>
          {%- endfor -%}

          {% if class.method|length > 0 %}
            <hr/>
            {% for m in class.method %}
              <!-- don't indent the lines below: you will break the graphical layout -->
              <tr>
                <td align="left" width="0"></td>
                <td align="left" width="4">{% if detailLevel|int >= 1 %}<font point-size="10" color="blue" >M</font>{% endif %}</td>
                <td align="left">{{m.get('name')}}({% for arg in m.argument %}{{printTypeNicely(arg)}}{% if not loop.last %},{% endif %}{% endfor %})</td>
                <td align="left" >: {% if m.returnvalue|length>0 %}{% for rv in m.returnvalue %}{{printTypeNicely(rv)}}{% if not loop.last %},{% endif %}{% endfor %}{% else %}void{% endif %}</td>
              </tr>
            {% endfor %}
          {% endif %}
        {% endif %}
      </table>>]
  {% endfor %}

  {# Now we add relations between classes #}
  {% for className in designInspector.get_names_of_all_classes() %}
    {% for ho in designInspector.objectify_class(className).hasobjects %}
      {{hasObjectsRelation(className, ho)}}
    {% endfor %}
  {% endfor %}

  {# And now, ROOT "class" and connections to its children #}
  class_ROOT [label="ROOT"]
  {% for ho in designInspector.objectify_root().hasobjects %}
    {{hasObjectsRelation('ROOT', ho)}}
  {% endfor %}

}
