
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    This file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.

 */


#include <SourceVariables.h>
#include <LogIt.h>
using namespace std;

#include <DRegs.h>

namespace AddressSpace
{

/* The thread pool should be initialized by Meta while reading the config file, using function:
    SourceVariables_initSourceVariablesThreadPool */
static Quasar::ThreadPool *sourceVariableThreads = nullptr;
void SourceVariables_initSourceVariablesThreadPool (unsigned int minThreads, unsigned int maxThreads, unsigned int maxJobs)
{
    LOG(Log::DBG) << "Initializing source variables thread pool to min=" << minThreads  << " max=" << maxThreads << " threads maxJobs=" << " jobs";
    sourceVariableThreads = new Quasar::ThreadPool (maxThreads, maxJobs);
}

void SourceVariables_destroySourceVariablesThreadPool ()
{
    if (sourceVariableThreads)
    {
        delete sourceVariableThreads;
        sourceVariableThreads = nullptr;
    }
}

Quasar::ThreadPool* SourceVariables_getThreadPool () {
    return sourceVariableThreads;
}
}

#ifndef BACKEND_OPEN62541


#include <iomanager.h>

#include <iostream>
#include <stdexcept>

#include <QuasarThreadPool.h>


namespace AddressSpace
{




UaStatus SourceVariables_spawnIoJobRead (
    ASSourceVariableJobId jobId,
    IOManagerCallback *callback,
    OpcUa_UInt32 hTransaction,
    OpcUa_UInt32        callbackHandle,
    const UaNode *parentNode
)
{
    if (! sourceVariableThreads)
        throw std::runtime_error("Attempted Source Variable operation, but Source Variable threads are not up.");
    switch (jobId)
    {
    default:
        return OpcUa_Bad;
    }
}

UaStatus SourceVariables_spawnIoJobWrite (
    ASSourceVariableJobId jobId,
    IOManagerCallback *callback,
    OpcUa_UInt32 hTransaction,
    OpcUa_UInt32        callbackHandle,
    const UaNode *parentNode,
    OpcUa_WriteValue*   pWriteValue
)
{
    if (! sourceVariableThreads)
        throw std::runtime_error("Attempted Source Variable operation, but Source Variable threads are not up.");
    switch (jobId)
    {
    default:
        return OpcUa_Bad;
    }
}

}

#endif // BACKEND_OPEN62541