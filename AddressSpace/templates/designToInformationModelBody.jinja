{# Â© Copyright CERN, 2015.                                                       #}
{# All rights not expressly granted are reserved.                                #}
{# This file is part of Quasar.                                                  #}
{#                                                                               #}
{# Quasar is free software: you can redistribute it and/or modify                #}
{# it under the terms of the GNU Lesser General Public Licence as published by   #}
{# the Free Software Foundation, either version 3 of the Licence.                #}
{# Quasar is distributed in the hope that it will be useful,                     #}
{# but WITHOUT ANY WARRANTY; without even the implied warranty of                #}
{#                                                                               #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 #}
{# GNU Lesser General Public Licence for more details.                           #}
{#                                                                               #}
{# You should have received a copy of the GNU Lesser General Public License      #}
{# along with Quasar.  If not, see <http://www.gnu.org/licenses/>                #}
{#                                                                               #}
{# Created:   Jun 2014 (the original XSLT version)                               #}
{#            23 Mar 2020 (translated to Jinja2)                                 #}
{# Authors:                                                                      #}
{#   Piotr Nikiel <piotr@nikiel.info>                                            #}

{% import 'headers.jinja' as headers %}
{{ headers.cppFullGeneratedHeader() }}

#include <string>

#include <ASInformationModel.h>
#include <LogIt.h>

namespace AddressSpace
{

void ASInformationModel::createNodesOfTypes (ASNodeManager *nm)
{
#ifndef BACKEND_OPEN62541  // TODO: @pnikiel: we actually could make it work for open62541 as well!
	UaObjectTypeSimple * type;
	UaStatus addStatus;
  {% for className in designInspector.get_names_of_all_classes() %}
    type = new UaObjectTypeSimple ("{{className}}", UaNodeId(AS_TYPE_{{className|upper}}, nm->getNameSpaceIndex()), /* locale id*/UaString(""), /*is abstract*/OpcUa_False);
    addStatus = nm->addNodeAndReference(OpcUaId_BaseObjectType, type, OpcUaId_HasSubtype);
    if (!addStatus.isGood())
    {
      LOG(Log::ERR) << "While adding a type definition node: " << addStatus.toString().toUtf8();
      throw std::runtime_error (std::string("in ASInformationModel::createNodesOfTypes: ") + addStatus.toString().toUtf8());
    }
  {% endfor %}
#endif // BACKEND_OPEN62541
}

}
